'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Currencies = (function (_React$Component) {
  _inherits(Currencies, _React$Component);

  function Currencies(props) {
    _classCallCheck(this, Currencies);

    _get(Object.getPrototypeOf(Currencies.prototype), 'constructor', this).call(this, props);
    this.props = { wealth: window.wealth, influence: window.influence, power: window.power };
  }

  _createClass(Currencies, [{
    key: 'tick',
    value: function tick() {
      window.wealth += window.wealthIncome;
      window.influence += window.influenceIncome;
      window.power += window.powerIncome;
      this.forceUpdate();
      // this.setState((prevState) => ({
      //   wealth: prevState.wealth + 1
      // }));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this = this;

      this.interval = setInterval(function () {
        return _this.tick();
      }, 1000);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearInterval(this.interval);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        'ðŸ’°: ',
        window.wealth,
        ' | ðŸ¤”: ',
        window.influence,
        ' | ðŸ¤“: ',
        window.power
      );
    }
  }]);

  return Currencies;
})(React.Component);

ReactDOM.render(React.createElement(Currencies, null), document.getElementById('currencies'));

// Ideas:
// * Window.Paper, which is a resource that will allow you to generate Blog Posts, which can create either Influence or Power. It does not translate directly to Money. (This is better than the "contributing to Open Source" or "Asking for Help on HFSE", since it's a bit of a stretch to apply them to corporations.) [Unnecessary since now Your Brand allows direct conversions.]
// *Tooltips for the resources so users know exactly what each emoji stands for.

// * Establish 'toasts' every time you do an action to indicate exactly what you're doing!